{"ast":null,"code":"import{useEffect,useState}from'react';import Machine from'./Machine';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export default function Machines(){const URL=\"https://mosaicmind-web.onrender.com/get-counts\";const[machines,setMachines]=useState({});useEffect(()=>{const callFetchData=async()=>{return await fetchData();};callFetchData();},[]);const fetchData=async()=>{try{const response=await fetch(URL);if(!response.ok){throw new Error('Network response was not ok');}const json=await response.json();console.log(json);setMachines(json[0]);}catch(error){console.error('Failed to fetch:',error);}};const[isLoading,setIsLoading]=useState(true);useEffect(()=>{const fetchData=async()=>{try{const response=await fetch(URL);if(!response.ok){throw new Error('Network response was not ok');}const json=await response.json();setMachines(json[0]);setIsLoading(false);}catch(error){console.error('Failed to fetch:',error);}};fetchData();},[]);if(isLoading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}else{return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{className:\"text-1\",children:\"Choose a Machine\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"div\",{className:\"machines\",children:[/*#__PURE__*/_jsx(Machine,{name:\"Machine 1\",status:\"Online\",updates:machines['r1-update-c'],positiveFeedback:machines['r1-correct-c'],negativeFeedback:machines['r1-fail-c'],successRate:Math.round(machines['r1-correct-c']/(machines['r1-fail-c']+machines['r1-correct-c'])*100)}),/*#__PURE__*/_jsx(Machine,{name:\"Machine 2\",status:\"Online\",updates:machines['r2-update-c'],positiveFeedback:machines['r2-correct-c'],negativeFeedback:machines['r2-fail-c'],successRate:Math.round(machines['r2-correct-c']/(machines['r2-fail-c']+machines['r2-correct-c'])*100)}),/*#__PURE__*/_jsx(Machine,{name:\"Machine 3\",status:\"Online\",updates:machines['r3-update-c'],positiveFeedback:machines['r3-correct-c'],negativeFeedback:machines['r3-fail-c'],successRate:Math.round(machines['r3-correct-c']/(machines['r3-fail-c']+machines['r3-correct-c'])*100)}),/*#__PURE__*/_jsx(Machine,{name:\"Machine 4\",status:\"Online\",updates:machines['r4-update-c'],positiveFeedback:machines['r4-correct-c'],negativeFeedback:machines['r4-fail-c'],successRate:Math.round(machines['r4-correct-c']/(machines['r4-fail-c']+machines['r4-correct-c'])*100)})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{className:\"text-1\",children:\"MosaicMind V1\"})]});}}","map":{"version":3,"names":["useEffect","useState","Machine","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Machines","URL","machines","setMachines","callFetchData","fetchData","response","fetch","ok","Error","json","console","log","error","isLoading","setIsLoading","children","className","name","status","updates","positiveFeedback","negativeFeedback","successRate","Math","round"],"sources":["C:/Users/w2021/Desktop/MosaicMind/MosaicMind_Web/src/pages/Machines.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport Machine from './Machine';\r\n\r\nexport default function Machines() {\r\n\r\n\tconst URL = `https://mosaicmind-web.onrender.com/get-counts` \r\n\tconst [machines, setMachines] = useState({});\r\n\r\n\tuseEffect(() => {\r\n       \r\n        \r\n        const callFetchData = async () => {\r\n            return await fetchData(); \r\n        };\r\n\r\n        callFetchData();\r\n        \r\n    }, []);\r\n    \r\n    const fetchData = async () => {\r\n        try {\r\n            const response = await fetch(URL);\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            const json = await response.json();\r\n            console.log(json);\r\n            setMachines(json[0]);\r\n        } catch (error) {\r\n            console.error('Failed to fetch:', error);\r\n        }\r\n    };\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch(URL);\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                const json = await response.json();\r\n                setMachines(json[0]);\r\n                setIsLoading(false);\r\n            } catch (error) {\r\n                console.error('Failed to fetch:', error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    if (isLoading) {\r\n        return <div>Loading...</div>;\r\n    }else{\r\n        return (\r\n            <>\r\n                <br />\r\n                <br />\r\n                <div className=\"text-1\">Choose a Machine</div>\r\n                <br />\r\n                    <div className=\"machines\">\r\n                        <Machine name=\"Machine 1\" status=\"Online\" updates={machines['r1-update-c']} positiveFeedback={machines['r1-correct-c']} negativeFeedback={machines['r1-fail-c']} successRate={Math.round((machines['r1-correct-c']/(machines['r1-fail-c'] + machines['r1-correct-c']))*100)}/>\r\n                        <Machine name=\"Machine 2\" status=\"Online\" updates={machines['r2-update-c']} positiveFeedback={machines['r2-correct-c']} negativeFeedback={machines['r2-fail-c']} successRate={Math.round((machines['r2-correct-c']/(machines['r2-fail-c'] + machines['r2-correct-c']))*100)}/>\r\n                        <Machine name=\"Machine 3\" status=\"Online\" updates={machines['r3-update-c']} positiveFeedback={machines['r3-correct-c']} negativeFeedback={machines['r3-fail-c']} successRate={Math.round((machines['r3-correct-c']/(machines['r3-fail-c'] + machines['r3-correct-c']))*100)}/>\r\n                        <Machine name=\"Machine 4\" status=\"Online\" updates={machines['r4-update-c']} positiveFeedback={machines['r4-correct-c']} negativeFeedback={machines['r4-fail-c']} successRate={Math.round((machines['r4-correct-c']/(machines['r4-fail-c'] + machines['r4-correct-c']))*100)}/>\r\n                </div>\r\n                <br />\r\n                <div className=\"text-1\">MosaicMind V1</div>\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}