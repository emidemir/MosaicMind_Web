{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\w2021\\\\Desktop\\\\MosaicMind\\\\MosaicMind_Web\\\\src\\\\pages\\\\Machines.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport Machine from './Machine';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Machines() {\n  _s();\n  const URL = `https://mosaicmind-web.onrender.com/get-counts`;\n  const [machines, setMachines] = useState({});\n  useEffect(() => {\n    const callFetchData = async () => {\n      return await fetchData();\n    };\n    callFetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const response = await fetch(URL);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const json = await response.json();\n      console.log(json);\n      setMachines(json[0]);\n    } catch (error) {\n      console.error('Failed to fetch:', error);\n    }\n  };\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(URL);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const json = await response.json();\n        setMachines(json[0]);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Failed to fetch:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-1\",\n        children: \"Choose a Machine\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"machines\",\n        children: [/*#__PURE__*/_jsxDEV(Machine, {\n          name: \"Machine 1\",\n          status: \"Online\",\n          updates: machines['r1-update-c'],\n          positiveFeedback: machines['r1-correct-c'],\n          negativeFeedback: machines['r1-fail-c'],\n          successRate: Math.round(machines['r1-correct-c'] / machines['r1-fail-c'] * 100)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Machine, {\n          name: \"Machine 2\",\n          status: \"Online\",\n          updates: machines['r2-update-c'],\n          positiveFeedback: machines['r2-correct-c'],\n          negativeFeedback: machines['r2-fail-c'],\n          successRate: Math.round(machines['r2-correct-c'] / machines['r2-fail-c'] * 100)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Machine, {\n          name: \"Machine 3\",\n          status: \"Online\",\n          updates: machines['r3-update-c'],\n          positiveFeedback: machines['r3-correct-c'],\n          negativeFeedback: machines['r3-fail-c'],\n          successRate: Math.round(machines['r3-correct-c'] / machines['r3-fail-c'] * 100)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Machine, {\n          name: \"Machine 4\",\n          status: \"Online\",\n          updates: machines['r4-update-c'],\n          positiveFeedback: machines['r4-correct-c'],\n          negativeFeedback: machines['r4-fail-c'],\n          successRate: Math.round(machines['r4-correct-c'] / machines['r4-fail-c'] * 100)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-1\",\n        children: \"MosaicMind V1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n}\n_s(Machines, \"RKubjJFtflw42aQQIT1MxRoT1QY=\");\n_c = Machines;\nvar _c;\n$RefreshReg$(_c, \"Machines\");","map":{"version":3,"names":["useEffect","useState","Machine","jsxDEV","_jsxDEV","Fragment","_Fragment","Machines","_s","URL","machines","setMachines","callFetchData","fetchData","response","fetch","ok","Error","json","console","log","error","isLoading","setIsLoading","children","fileName","_jsxFileName","lineNumber","columnNumber","className","name","status","updates","positiveFeedback","negativeFeedback","successRate","Math","round","_c","$RefreshReg$"],"sources":["C:/Users/w2021/Desktop/MosaicMind/MosaicMind_Web/src/pages/Machines.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport Machine from './Machine';\r\n\r\nexport default function Machines() {\r\n\r\n\tconst URL = `https://mosaicmind-web.onrender.com/get-counts` \r\n\tconst [machines, setMachines] = useState({});\r\n\r\n\tuseEffect(() => {\r\n       \r\n        \r\n        const callFetchData = async () => {\r\n            return await fetchData(); \r\n        };\r\n\r\n        callFetchData();\r\n        \r\n    }, []);\r\n    \r\n    const fetchData = async () => {\r\n        try {\r\n            const response = await fetch(URL);\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            const json = await response.json();\r\n            console.log(json);\r\n            setMachines(json[0]);\r\n        } catch (error) {\r\n            console.error('Failed to fetch:', error);\r\n        }\r\n    };\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch(URL);\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                const json = await response.json();\r\n                setMachines(json[0]);\r\n                setIsLoading(false);\r\n            } catch (error) {\r\n                console.error('Failed to fetch:', error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    if (isLoading) {\r\n        return <div>Loading...</div>;\r\n    }else{\r\n        return (\r\n            <>\r\n                <br />\r\n                <br />\r\n                <div className=\"text-1\">Choose a Machine</div>\r\n                <br />\r\n                    <div className=\"machines\">\r\n                        <Machine name=\"Machine 1\" status=\"Online\" updates={machines['r1-update-c']} positiveFeedback={machines['r1-correct-c']} negativeFeedback={machines['r1-fail-c']} successRate={Math.round((machines['r1-correct-c']/machines['r1-fail-c'])*100)}/>\r\n                        <Machine name=\"Machine 2\" status=\"Online\" updates={machines['r2-update-c']} positiveFeedback={machines['r2-correct-c']} negativeFeedback={machines['r2-fail-c']} successRate={Math.round((machines['r2-correct-c']/machines['r2-fail-c'])*100)}/>\r\n                        <Machine name=\"Machine 3\" status=\"Online\" updates={machines['r3-update-c']} positiveFeedback={machines['r3-correct-c']} negativeFeedback={machines['r3-fail-c']} successRate={Math.round((machines['r3-correct-c']/machines['r3-fail-c'])*100)}/>\r\n                        <Machine name=\"Machine 4\" status=\"Online\" updates={machines['r4-update-c']} positiveFeedback={machines['r4-correct-c']} negativeFeedback={machines['r4-fail-c']} successRate={Math.round((machines['r4-correct-c']/machines['r4-fail-c'])*100)}/>\r\n                </div>\r\n                <br />\r\n                <div className=\"text-1\">MosaicMind V1</div>\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}